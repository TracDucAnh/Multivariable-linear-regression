summary(model2)
test_data$Memory_Speed_Prediction <- predict(model2, test_data)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
data <- read.csv("New_GPU_Data.csv")
colnames(data)
data_variables<-data[,c("Dedicated", "Integrated", "Manufacturer" ,"L2_Cache", "Memory_Bandwidth", "Memory_Bus",  "Open_GL", "Shader", "Memory_Type", "Notebook_GPU", "SLI_Crossfire", "Resolution_WxH",  "Memory_Speed")]
head(data_variables)
library(dplyr)
library(tidyr)
library(caret)
data_variables<- data_variables %>% separate(Resolution_WxH, c('Resolution_Width', 'Resolution_Height'), sep = "x")
data_variables$Resolution_Width <- as.numeric(data_variables$Resolution_Width)
data_variables$Resolution_Height <- as.numeric(data_variables$Resolution_Height)
unique(data_variables$Dedicated)
data_variables$Dedicated = factor(data_variables$Dedicated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Dedicated <- as.numeric(as.character(data_variables$Dedicated))
unique(data_variables$Manufacturer)
data_variables$Manufacturer = factor(data_variables$Manufacturer, level = c("Nvidia", "AMD", "Intel", "ATI"),
label = c(0, 1, 2, 3))
data_variables$Manufacturer <- as.numeric(as.character(data_variables$Manufacturer))
unique(data_variables$Integrated)
data_variables$Integrated = factor(data_variables$Integrated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Integrated <- as.numeric(as.character(data_variables$Integrated))
unique(data_variables$Notebook_GPU)
data_variables$Notebook_GPU = factor(data_variables$Notebook_GPU, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Notebook_GPU <- as.numeric(as.character(data_variables$Notebook_GPU))
unique(data_variables$SLI_Crossfire)
data_variables$SLI_Crossfire = factor(data_variables$SLI_Crossfire, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$SLI_Crossfire <- as.numeric(as.character(data_variables$SLI_Crossfire))
unique(data_variables$Memory_Type)
data_variables$Memory_Type = factor(data_variables$Memory_Type, levels = c("GDDR3",  "GDDR4",  "GDDR5",  "DDR",    "DDR3",   "DDR4",   "GDDR5X", "HBM-2",  "DDR2", "eDRAM",  "HBM-1",  "GDDR2" ),
label = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
data_variables$Memory_Type <- as.numeric(as.character(data_variables$Memory_Type))
head(data_variables)
cor_matrix <- cor(data_variables)
library(pheatmap)
pheatmap(cor_matrix,
display_numbers = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize = 12)
splitIndex <- createDataPartition(data_variables$Memory_Speed, p = 0.8, list = FALSE)
train_data <- data_variables[splitIndex, ]
test_data <- data_variables[-splitIndex, ]
train_data[, c("L2_Cache", "Memory_Bandwidth", "Memory_Bus", "Open_GL", "Shader", "Resolution_Width", "Resolution_Height", "Memory_Speed")] = scale(train_data[, c("L2_Cache", "Memory_Bandwidth", "Memory_Bus", "Open_GL", "Shader", "Resolution_Width", "Resolution_Height", "Memory_Speed")])
model1 <- lm(Memory_Speed~Dedicated + Integrated + Manufacturer + L2_Cache +
Memory_Bandwidth + Memory_Bus + Open_GL + Shader + Memory_Type +
Notebook_GPU + SLI_Crossfire + Resolution_Width + Resolution_Height, train_data)
summary(model1)
model2 <- lm(Memory_Speed~ Manufacturer + L2_Cache + Memory_Bandwidth +
Memory_Bus + Open_GL + Memory_Type + Notebook_GPU + SLI_Crossfire +
Resolution_Width, train_data)
summary(model2)
test_data$Memory_Speed_Prediction <- predict(model2, test_data)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
mse <- mean((actual - predicted)^2)
print(mse)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
mse <- mean((actual - predict)^2)
print(mse)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
library(Metrics)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
mse <- mse(actual, predict)
data <- read.csv("New_GPU_Data.csv")
colnames(data)
data_variables<-data[,c("Dedicated", "Integrated", "Manufacturer" ,"L2_Cache", "Memory_Bandwidth", "Memory_Bus",  "Open_GL", "Shader", "Memory_Type", "Notebook_GPU", "SLI_Crossfire", "Resolution_WxH",  "Memory_Speed")]
head(data_variables)
library(dplyr)
library(tidyr)
library(caret)
data_variables<- data_variables %>% separate(Resolution_WxH, c('Resolution_Width', 'Resolution_Height'), sep = "x")
data_variables$Resolution_Width <- as.numeric(data_variables$Resolution_Width)
data_variables$Resolution_Height <- as.numeric(data_variables$Resolution_Height)
unique(data_variables$Dedicated)
data_variables$Dedicated = factor(data_variables$Dedicated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Dedicated <- as.numeric(as.character(data_variables$Dedicated))
unique(data_variables$Manufacturer)
data_variables$Manufacturer = factor(data_variables$Manufacturer, level = c("Nvidia", "AMD", "Intel", "ATI"),
label = c(0, 1, 2, 3))
data_variables$Manufacturer <- as.numeric(as.character(data_variables$Manufacturer))
unique(data_variables$Integrated)
data_variables$Integrated = factor(data_variables$Integrated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Integrated <- as.numeric(as.character(data_variables$Integrated))
unique(data_variables$Notebook_GPU)
data_variables$Notebook_GPU = factor(data_variables$Notebook_GPU, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Notebook_GPU <- as.numeric(as.character(data_variables$Notebook_GPU))
unique(data_variables$SLI_Crossfire)
data_variables$SLI_Crossfire = factor(data_variables$SLI_Crossfire, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$SLI_Crossfire <- as.numeric(as.character(data_variables$SLI_Crossfire))
unique(data_variables$Memory_Type)
data_variables$Memory_Type = factor(data_variables$Memory_Type, levels = c("GDDR3",  "GDDR4",  "GDDR5",  "DDR",    "DDR3",   "DDR4",   "GDDR5X", "HBM-2",  "DDR2", "eDRAM",  "HBM-1",  "GDDR2" ),
label = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
data_variables$Memory_Type <- as.numeric(as.character(data_variables$Memory_Type))
head(data_variables)
cor_matrix <- cor(data_variables)
library(pheatmap)
pheatmap(cor_matrix,
display_numbers = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize = 12)
splitIndex <- createDataPartition(data_variables$Memory_Speed, p = 0.8, list = FALSE)
train_data <- data_variables[splitIndex, ]
test_data <- data_variables[-splitIndex, ]
train_data[, c("L2_Cache", "Memory_Bandwidth", "Memory_Bus", "Open_GL", "Shader", "Resolution_Width", "Resolution_Height", "Memory_Speed")] = scale(train_data[, c("L2_Cache", "Memory_Bandwidth", "Memory_Bus", "Open_GL", "Shader", "Resolution_Width", "Resolution_Height", "Memory_Speed")])
model1 <- lm(Memory_Speed~Dedicated + Integrated + Manufacturer + L2_Cache +
Memory_Bandwidth + Memory_Bus + Open_GL + Shader + Memory_Type +
Notebook_GPU + SLI_Crossfire + Resolution_Width + Resolution_Height, train_data)
summary(model1)
model2 <- lm(Memory_Speed~ Manufacturer + L2_Cache + Memory_Bandwidth +
Memory_Bus + Open_GL + Memory_Type + Notebook_GPU + SLI_Crossfire +
Resolution_Width, train_data)
summary(model2)
test_data$Memory_Speed_Prediction <- predict(model2, test_data)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
library(Metrics)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
mse <- mse(actual, predict)
print(mse)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
print(mse(actual, predict))
print(mape(actual, predict))
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
data <- read.csv("New_GPU_Data.csv")
colnames(data)
data_variables<-data[,c("Dedicated", "Integrated", "Manufacturer" ,"L2_Cache", "Memory_Bandwidth", "Memory_Bus",  "Open_GL", "Shader", "Memory_Type", "Notebook_GPU", "SLI_Crossfire", "Resolution_WxH",  "Memory_Speed")]
head(data_variables)
library(dplyr)
library(tidyr)
library(caret)
data_variables<- data_variables %>% separate(Resolution_WxH, c('Resolution_Width', 'Resolution_Height'), sep = "x")
data_variables$Resolution_Width <- as.numeric(data_variables$Resolution_Width)
data_variables$Resolution_Height <- as.numeric(data_variables$Resolution_Height)
unique(data_variables$Dedicated)
data_variables$Dedicated = factor(data_variables$Dedicated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Dedicated <- as.numeric(as.character(data_variables$Dedicated))
unique(data_variables$Manufacturer)
data_variables$Manufacturer = factor(data_variables$Manufacturer, level = c("Nvidia", "AMD", "Intel", "ATI"),
label = c(0, 1, 2, 3))
data_variables$Manufacturer <- as.numeric(as.character(data_variables$Manufacturer))
unique(data_variables$Integrated)
data_variables$Integrated = factor(data_variables$Integrated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Integrated <- as.numeric(as.character(data_variables$Integrated))
unique(data_variables$Notebook_GPU)
data_variables$Notebook_GPU = factor(data_variables$Notebook_GPU, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Notebook_GPU <- as.numeric(as.character(data_variables$Notebook_GPU))
unique(data_variables$SLI_Crossfire)
data_variables$SLI_Crossfire = factor(data_variables$SLI_Crossfire, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$SLI_Crossfire <- as.numeric(as.character(data_variables$SLI_Crossfire))
unique(data_variables$Memory_Type)
data_variables$Memory_Type = factor(data_variables$Memory_Type, levels = c("GDDR3",  "GDDR4",  "GDDR5",  "DDR",    "DDR3",   "DDR4",   "GDDR5X", "HBM-2",  "DDR2", "eDRAM",  "HBM-1",  "GDDR2" ),
label = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
data_variables$Memory_Type <- as.numeric(as.character(data_variables$Memory_Type))
head(data_variables)
cor_matrix <- cor(data_variables)
library(pheatmap)
pheatmap(cor_matrix,
display_numbers = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
fontsize = 12)
splitIndex <- createDataPartition(data_variables$Memory_Speed, p = 0.8, list = FALSE)
train_data <- data_variables[splitIndex, ]
test_data <- data_variables[-splitIndex, ]
model1 <- lm(Memory_Speed~Dedicated + Integrated + Manufacturer + L2_Cache +
Memory_Bandwidth + Memory_Bus + Open_GL + Shader + Memory_Type +
Notebook_GPU + SLI_Crossfire + Resolution_Width + Resolution_Height, train_data)
summary(model1)
model2 <- lm(Memory_Speed~ Manufacturer + L2_Cache + Memory_Bandwidth +
Memory_Bus + Open_GL + Memory_Type + Notebook_GPU + SLI_Crossfire +
Resolution_Width, train_data)
summary(model2)
test_data$Memory_Speed_Prediction <- predict(model2, test_data)
head(test_data[, c("Memory_Speed", "Memory_Speed_Prediction")], n=20)
actual <- test_data$Memory_Speed
predict <- test_data$Memory_Speed_Prediction
print(mape(actual, predict))
data <- read.csv("New_GPU_Data.csv")
colnames(data)
data_variables<-data[,c("Dedicated", "Integrated", "Manufacturer" ,"L2_Cache", "Memory_Bandwidth", "Memory_Bus",  "Open_GL", "Shader", "Memory_Type", "Notebook_GPU", "SLI_Crossfire", "Resolution_WxH",  "Memory_Speed")]
head(data_variables)
library(dplyr)
library(tidyr)
library(caret)
data_variables<- data_variables %>% separate(Resolution_WxH, c('Resolution_Width', 'Resolution_Height'), sep = "x")
data_variables$Resolution_Width <- as.numeric(data_variables$Resolution_Width)
data_variables$Resolution_Height <- as.numeric(data_variables$Resolution_Height)
unique(data_variables$Dedicated)
data_variables$Dedicated = factor(data_variables$Dedicated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Dedicated <- as.numeric(as.character(data_variables$Dedicated))
unique(data_variables$Manufacturer)
data_variables$Manufacturer = factor(data_variables$Manufacturer, level = c("Nvidia", "AMD", "Intel", "ATI"),
label = c(0, 1, 2, 3))
data_variables$Manufacturer <- as.numeric(as.character(data_variables$Manufacturer))
unique(data_variables$Integrated)
data_variables$Integrated = factor(data_variables$Integrated, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Integrated <- as.numeric(as.character(data_variables$Integrated))
unique(data_variables$Notebook_GPU)
data_variables$Notebook_GPU = factor(data_variables$Notebook_GPU, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$Notebook_GPU <- as.numeric(as.character(data_variables$Notebook_GPU))
unique(data_variables$SLI_Crossfire)
data_variables$SLI_Crossfire = factor(data_variables$SLI_Crossfire, levels = c("Yes", "No"),
label = c(1, 0))
data_variables$SLI_Crossfire <- as.numeric(as.character(data_variables$SLI_Crossfire))
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
View(na_summary)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/regression.R", echo=TRUE)
library(readr)
New_GPU_Data <- read_csv("New_GPU_Data.csv")
#Chuyen doi bien Resolution_WxH thanh Total_Pixels ve cac bieu do de dang hon
library(dplyr)
names(New_GPU_Data) [names(New_GPU_Data) == "Resolution_WxH"] <- "Total_Pixels"
New_GPU_Data$Total_Pixels <- sapply(strsplit(New_GPU_Data$Total_Pixels, "x"),
function(x) as.numeric(x[1]) * as.numeric(x[2]))
#Ve bieu do Histogram
plotHistogram <- function(sample, name) {
x_axis = seq(floor(min(sample)), max(sample)*1.05,
by = floor((max(sample)*1.05 - min(sample))/15))
max_y = max(hist(sample, plot=FALSE)$counts) * 1.1  # Mở rộng trục y một chút
y_axis = seq(0, max_y, length.out = 10)
hist_data <- hist(sample, main=paste("Histogram of", name), xlab=name,
xaxt="n", ylab="Frequency", labels=FALSE, breaks=x_axis, col="steelblue")
axis(1, at = x_axis)
text(hist_data$mids, hist_data$counts, labels = hist_data$counts,
pos = 3, cex = 0.4)
}
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
plotHistogram(New_GPU_Data$Memory_Bus, name="Memory Bus [Bit]")
plotHistogram(New_GPU_Data$Memory_Speed, name="Memory Speed [MHz]")
plotHistogram(New_GPU_Data$L2_Cache, name="L2 Cache [KB]")
plotHistogram(New_GPU_Data$Total_Pixels, name="Total Pixels [Pixels]")
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
memory_type_counts <- table(New_GPU_Data$Memory_Type)
bp_mtype <- barplot(table(New_GPU_Data$Memory_Type), main = "Bar plot of Memory Type",
xlab = "Memory Type", ylab = "Frequency", col = "steelblue", cex.names=0.7, ylim = c(0, max(memory_type_counts) * 1.1))
text(x = bp_mtype, y = memory_type_counts, label = memory_type_counts,
pos = 3, cex = 0.7, col = "black")
#Ve bieu do cot cho bien Manufacturer
manu_counts <- table(New_GPU_Data$Manufacturer)
bp_manu <- barplot(table(New_GPU_Data$Manufacturer), main = "Bar plot of Manufacturer",
xlab = "Manufacturer", ylab = "Frequency", col = "steelblue", ylim = c(0, max(manu_counts) * 1.1))
text(x = bp_manu, y = manu_counts, label = manu_counts,
pos = 3, cex = 0.8, col = "black")
#Tinh cac gia tri dac trung cua bien va ve bieu do hop
Calculation <- function(sample1, sample2) {
#Tinh trung binh cua mau
Mean <- tapply(sample1,sample2, mean)
#Tinh phuong sai cua mau
Var <- tapply(sample1,sample2, var)
#Tinh do lech chuan cua mau
Sd <- tapply(sample1,sample2, sd)
#Tim gia tri nho nhat cua mau
Min <- tapply(sample1,sample2, min)
#Tim gia tri lon nhat cua mau
Max <- tapply(sample1,sample2, max)
#Tinh cac diem tu phan vi cua mau
Q1 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.25, na.rm=TRUE))
Q2 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.5, na.rm=TRUE))
Q3 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.75, na.rm=TRUE))
Summary <- cbind(Mean, Var, Sd, Min, Max, Q1, Q2, Q3)
return (Summary)
}
Boxplot <- function(sample1, sample2, name1, name2) {
boxplot(sample1 ~ sample2, main=paste("Box plot of", name1, "according to", name2),
xlab=name1, ylab=name2, col="steelblue")
}
#Memory_Speed
result_SM <- Calculation(New_GPU_Data$Memory_Speed, New_GPU_Data$Manufacturer)
Boxplot(New_GPU_Data$Memory_Speed, New_GPU_Data$Manufacturer, "Manufacturer", "Memory Speed")
result_SS <- Calculation(New_GPU_Data$Memory_Speed, New_GPU_Data$Shader)
Boxplot(New_GPU_Data$Memory_Speed, New_GPU_Data$Shader, "Shader", "Memory Speed")
install.packages("GGally")
library(GGally)
#Trich xuat du lieu dinh luong
extracted_data <- New_GPU_Data[, c("Memory_Bandwidth",
"Memory_Bus",
"Memory_Speed",
"L2_Cache",
"Total_Pixels",
"Shader")]
ggpairs(extracted_data)
library(readr)
New_GPU_Data <- read_csv("New_GPU_Data.csv")
#Chuyen doi bien Resolution_WxH thanh Total_Pixels ve cac bieu do de dang hon
library(dplyr)
names(New_GPU_Data) [names(New_GPU_Data) == "Resolution_WxH"] <- "Total_Pixels"
New_GPU_Data$Total_Pixels <- sapply(strsplit(New_GPU_Data$Total_Pixels, "x"),
function(x) as.numeric(x[1]) * as.numeric(x[2]))
#Ve bieu do Histogram
plotHistogram <- function(sample, name) {
x_axis = seq(floor(min(sample)), max(sample)*1.05,
by = floor((max(sample)*1.05 - min(sample))/15))
max_y = max(hist(sample, plot=FALSE)$counts) * 1.1  # Mở rộng trục y một chút
y_axis = seq(0, max_y, length.out = 10)
hist_data <- hist(sample, main=paste("Histogram of", name), xlab=name,
xaxt="n", ylab="Frequency", labels=FALSE, breaks=x_axis, col="steelblue")
axis(1, at = x_axis)
text(hist_data$mids, hist_data$counts, labels = hist_data$counts,
pos = 3, cex = 0.4)
}
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
plotHistogram(New_GPU_Data$Memory_Bus, name="Memory Bus [Bit]")
plotHistogram(New_GPU_Data$Memory_Speed, name="Memory Speed [MHz]")
library(readr)
New_GPU_Data <- read_csv("New_GPU_Data.csv")
#Chuyen doi bien Resolution_WxH thanh Total_Pixels ve cac bieu do de dang hon
library(dplyr)
names(New_GPU_Data) [names(New_GPU_Data) == "Resolution_WxH"] <- "Total_Pixels"
New_GPU_Data$Total_Pixels <- sapply(strsplit(New_GPU_Data$Total_Pixels, "x"),
function(x) as.numeric(x[1]) * as.numeric(x[2]))
#Ve bieu do Histogram
plotHistogram <- function(sample, name) {
x_axis = seq(floor(min(sample)), max(sample)*1.05,
by = floor((max(sample)*1.05 - min(sample))/15))
max_y = max(hist(sample, plot=FALSE)$counts) * 1.1  # Mở rộng trục y một chút
y_axis = seq(0, max_y, length.out = 10)
hist_data <- hist(sample, main=paste("Histogram of", name), xlab=name,
xaxt="n", ylab="Frequency", labels=FALSE, breaks=x_axis, col="steelblue")
axis(1, at = x_axis)
text(hist_data$mids, hist_data$counts, labels = hist_data$counts,
pos = 3, cex = 0.4)
}
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
plotHistogram(New_GPU_Data$Memory_Bus, name="Memory Bus [Bit]")
library(readr)
New_GPU_Data <- read_csv("New_GPU_Data.csv")
#Chuyen doi bien Resolution_WxH thanh Total_Pixels ve cac bieu do de dang hon
library(dplyr)
names(New_GPU_Data) [names(New_GPU_Data) == "Resolution_WxH"] <- "Total_Pixels"
New_GPU_Data$Total_Pixels <- sapply(strsplit(New_GPU_Data$Total_Pixels, "x"),
function(x) as.numeric(x[1]) * as.numeric(x[2]))
#Ve bieu do Histogram
plotHistogram <- function(sample, name) {
x_axis = seq(floor(min(sample)), max(sample)*1.05,
by = floor((max(sample)*1.05 - min(sample))/15))
max_y = max(hist(sample, plot=FALSE)$counts) * 1.1  # Mở rộng trục y một chút
y_axis = seq(0, max_y, length.out = 10)
hist_data <- hist(sample, main=paste("Histogram of", name), xlab=name,
xaxt="n", ylab="Frequency", labels=FALSE, breaks=x_axis, col="steelblue")
axis(1, at = x_axis)
text(hist_data$mids, hist_data$counts, labels = hist_data$counts,
pos = 3, cex = 0.4)
}
hist(New_GPU_Data$Memory_Bandwidth, break = 50, main = "Histogram of Memory Bandwidth", xlab = "Memory Bandwidth [GB/sec]", col = "steelblue")
source("~/HCMUT/ASSIGNMENT PROBABILITY & STATISTIC/dataset/BTL_XSTK.R", echo=TRUE)
hist(New_GPU_Data$Memory_Bandwidth, breaks = 50, main = "Histogram of Memory Bandwidth", xlab = "Memory Bandwidth [GB/sec]", col = "steelblue")
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
hist(New_GPU_Data$Memory_Bandwidth, breaks = 15, main = "Histogram of Memory Bandwidth", xlab = "Memory Bandwidth [GB/sec]", col = "steelblue")
plotHistogram(New_GPU_Data$Memory_Bandwidth, name="Memory Bandwidth [GB/sec]")
#Alternative
hist(New_GPU_Data$Memory_Bandwidth, breaks = 15, main = "Histogram of Memory Bandwidth", xlab = "Memory Bandwidth [GB/sec]", col = "steelblue")
hist(New_GPU_Data$Memory_Bus, breaks = 15, main = "Histogram of Memory Bus", xlab = "MemoryBus [Bit]", col = "steelblue")
hist(New_GPU_Data$Memory_Speed, breaks = 15, main = "Histogram of Memory Speed", xlab = "Memory Speed [MHz]", col = "steelblue")
hist(New_GPU_Data$L2_Cache, breaks = 15, main = "Histogram of L2 Cache", xlab = "L2 Cache [KB]", col = "steelblue")
hist(New_GPU_Data$Total_Pixels, breaks = 15, main = "Histogram of Total Pixel", xlab = "Total pixels [pixels]", col = "steelblue")
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
memory_type_counts <- table(New_GPU_Data$Memory_Type)
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
memory_type_counts <- table(New_GPU_Data$Memory_Type)
bp_mtype <- barplot(table(New_GPU_Data$Memory_Type), main = "Bar plot of Memory Type",
xlab = "Memory Type", ylab = "Frequency", col = "steelblue", cex.names=0.7, ylim = c(0, max(memory_type_counts) * 1.1))
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
memory_type_counts <- table(New_GPU_Data$Memory_Type)
manufacturer_counts <- table(New_GPU_Data$Manufacturer)
barplot_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Bar plot of Manufacturer",
xlab = "Manufaturer", ylab = "Frequency", col = "steelblue")
bp_mtype <- barplot(table(New_GPU_Data$Memory_Type), main = "Bar plot of Memory Type",
xlab = "Memory Type", ylab = "Frequency", col = "steelblue", cex.names=0.7, ylim = c(0, max(memory_type_counts) * 1.1))
text(x = bp_mtype, y = memory_type_counts, label = memory_type_counts,
pos = 3, cex = 0.7, col = "black")
manufacturer_counts <- table(New_GPU_Data$Manufacturer)
barplot_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Bar plot of Manufacturer",
xlab = "Manufaturer", ylab = "Frequency", col = "steelblue")
text(x = barplot_manufaturer, y = manufacturer_counts, label = manufacturer_counts,
pos = 3, cex = 0.7, col = "black")
manufacturer_counts <- table(New_GPU_Data$Manufacturer)
barplot_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Bar plot of Manufacturer",
xlab = "Manufaturer", ylab = "Frequency", col = "steelblue", cex.names=0.7, ylim = c(0, max(manufacturer_counts)*1.1))
text(x = barplot_manufaturer, y = manufacturer_counts, label = manufacturer_counts,
pos = 3, cex = 0.7, col = "black")
manufacturer_count = table(New_GPU_Data$Manufacturer)
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer))
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), xlab = "Manufacturer", ylab = "Frequency", col = "steelblue")
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer" xlab = "Manufacturer", ylab = "Frequency", col = "steelblue")
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer" xlab = "Manufacturer", ylab = "Frequency", col = "steelblue")
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue")
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue")
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue",
cex.names = 0.7, ylim = c(0, max(manufacturer_count)*1.1))
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue",
cex.names = 1, ylim = c(0, max(manufacturer_count)*1.1))
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue",
cex.names = 1, ylim = c(0, max(manufacturer_count)*1.1))
text(x = bp_manufaturer, y = manufacturer_counts, pos = 3, col = "black")
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue",
cex.names = 1, ylim = c(0, max(manufacturer_count)*1.1))
text(x = bp_manufaturer, y = manufacturer_count, pos = 3, col = "black")
text(x = bp_manufaturer, y = manufacturer_count, pos = 3, col = "black", cex = 0.7, label = manufacturer_count)
#Tinh cac gia tri dac trung cua bien va ve bieu do hop
Calculation <- function(sample1, sample2) {
#Tinh trung binh cua mau
Mean <- tapply(sample1,sample2, mean)
#Tinh phuong sai cua mau
Var <- tapply(sample1,sample2, var)
#Tinh do lech chuan cua mau
Sd <- tapply(sample1,sample2, sd)
#Tim gia tri nho nhat cua mau
Min <- tapply(sample1,sample2, min)
#Tim gia tri lon nhat cua mau
Max <- tapply(sample1,sample2, max)
#Tinh cac diem tu phan vi cua mau
Q1 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.25, na.rm=TRUE))
Q2 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.5, na.rm=TRUE))
Q3 <- tapply(sample1,sample2, function(x) quantile(x, probs=0.75, na.rm=TRUE))
Summary <- cbind(Mean, Var, Sd, Min, Max, Q1, Q2, Q3)
return (Summary)
}
text(x = bp_manufaturer, y = manufacturer_count, label = manufacturer_count, pos = 3, col = "black", cex = 0.7)
#Ve bieu do cot cho cac du lieu dinh tinh (mang tinh phan loai)
#Ve bieu do cot cho bien Memory_Type
manufacturer_count = table(New_GPU_Data$Manufacturer)
bp_manufaturer <- barplot(table(New_GPU_Data$Manufacturer), main = "Barplot of Manufacturer", xlab = "Manufacturer", ylab = "Frequency", col = "steelblue",
cex.names = 1, ylim = c(0, max(manufacturer_count)*1.1))
text(x = bp_manufaturer, y = manufacturer_count, label = manufacturer_count, pos = 3, cex = 0.7, col = "black")
